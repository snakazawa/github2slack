@startuml
class Router

Router -> Controller.GitHubHookController
Router -> Controller.IndexController

namespace Controller {
    class GitHubHookController {
        + {static} void postIndex (Koa.Context ctx)
    }

    GitHubHookController --> Serializer.SerializerMaster
    GitHubHookController --> Sender.SlackSender

    class IndexController {
        + {static} void notFound (Koa.Context ctx)
        + {static} void internalServerError (Koa.Context ctx, Koa.Next next)
    }
}

namespace Model {
    class Message {
        - String _text
        - MessageType _type
        + Message constructor (String text, MessageType type)
        + get String text()
        + get String type()
    }

    enum MessageType

    Message --> MessageType

    namespace GitHub {
        class Payload {
            + Object repository
            + Object sender
            + Payload constructor (Object params)
        }

        class IssuesPayload {
            + Object action
            + Object issue
            + IssuesPayload constructor (Object params)
        }

        IssuesPayload --|> Payload
    }
}

namespace Serializer {
    class SerializerMaster {
        + String packageName
        + Serializers serializers
        + SerializerMaster constructor (String? packageName)
        + Promise<Message> serialize (String eventName, Object body)
        - Promise<Message> serializeIssuesEvent (IssuesPayload payload)
    }

    interface ISerializer<Payload T> {
        + Promise<Message> serialize (T payload)
    }
    
    SerializerMaster *-- ISerializer
    ISerializer --> Model.Message
    ISerializer --> GitHub.GitHubAPI
    ISerializer *-- Model.GitHub.Payload

    namespace JpnSerializer {
        class IssuesSerializer<IssuesPayload>
        class CommitCommentsSerializer<CommitCommentPayload>
        class GollumSerializer<GollumPayload>

        IssuesSerializer --|> Serializer.ISerializer
        CommitCommentsSerializer --|> Serializer.ISerializer
        GollumSerializer --|> Serializer.ISerializer
    }
}

namespace Sender {
    class SlackSender {
        - String _team
        - String _channel
        - String _token
        - String _botName
        - String _botIcon
        + SlackSender constructor (Object? defaultParams)
        + Promise<void> send (Message msg, Object params = {})
    }

    SlackSender --> Model.Message
}

namespace GitHub {
    class GitHubAPI {
        - String _token
        - GitHub _api
        + GitHubAPI constructor ([String token])
    }
}
@enduml
